* Installation

Clone this repo and tell Chicken to install it:
: cd coati-2d
: chicken-install -s

* The game loop

First things first, lets include the egg:
: (use coati)
Next we'll be defining our /game/, in the context of Coati a /game/ is a function that returns a /game loop/. Coati will loop this function, calling it with its previous return value until it is false.
Here is a small example of a /game/:
#+BEGIN_SRC scheme
(define (game)
  (lambda (#!optional (frames 0))
    (if (= frames 100) #f
        (+ frames 1))))
#+END_SRC
First let's initialise Coati, tell it to create a window 800 by 600 pixels and give it a title:
#+BEGIN_SRC scheme
(coati:init 800 600 "Hello Coati!" #f)
#+END_SRC
Here Coati will call the /game loop/ a 100 times. Incrementing the variable /frames/ each time. To start this game the function ~coati:start~ is used. It takes 5 arguments; the /width/, /height/ and title of the window, a boolean to decide whether to make the window /fullscreen/ and the /game/ function. So for example ...
#+BEGIN_SRC scheme
(coati:start game)
#+END_SRC
... will open a non-fullscreen window with a dimension of 800x600, the title /Hello Coati/ and will start the previously defined game.
To close the window when the game is done use the function ~(coati:close)~.
#+BEGIN_SRC scheme
(coati:close)
#+END_SRC

Put this all together and give it a try:

#+BEGIN_SRC scheme
(use coati)

(define (game)
 (lambda (#!optional (frames 0))
   (if (= frames 100) #f
       (+ frames 1))))

(coati:start 800 600 "Hello Coati" #f game)
(coati:close)
#+END_SRC

* Textures

Well that was boring! Now for something slightly less boring, getting something on screen. For that lets talk about textures.

At any given time there are two textures active in Coati. The first one is the /target/ texture, this is the texture to which everything is rendered and defaults to the screen (which is a texture in itself). The current target texture can be set with the macro ~(with-target texture body ...)~. The other texture is the texture that is used to render /from/ and must be set with ~(with-texture texture body ...)~.
The function ~(texture:clear colour)~ clears the current target texture with the specified colour. To create a colour use ~(rgb:create red green blue [alpha])~.

Let use change our previous game function to this ...
#+BEGIN_SRC scheme
(define (game)
  (lambda (#!optional (i 0))
    (texture:clear (rgb:create (* 0.01 i) 0 0))
    (if (= i 100) #f
        (+ i 1))))
#+END_SRC
Can you guess what this game function does? Exciting isn't it!

Let us see if we can top that by loading a texture using the function ~(texture:load filename)~. The most simple way of displaying a texture is making a rendering function from it using ~(texture:renderer texture [rect])~ calling the function returned by this will render the texture (or part of it) to the current active texture (the screen by default). 

Let's try:
#+BEGIN_SRC scheme
(define (game)
  (let* ((texture  (texture:load "./share/grid.png"))
         (renderer (texture:renderer texture)))
   (lambda (#!optional (i 0))
     (renderer)
     (if (= i 100) #f
         (+ i 1)))))
#+END_SRC

* Sprites

Rendering textures using a renderer might be okay for just a few textures but gets terribly inefficient after I while. To render many textures to screen it is best to use a /sprites/ in combination with a /sprite-batcher/. A /sprite-batcher/ collects multiple /sprites/ and renders them all in one go. To create a sprite-batcher use the function ~(sprite-batcher:create)~, to create a sprite use the function ~(sprite:create texture)~

* Sprite batcher

* Input

* Nodes

* Transformations

* Tilemaps

* Polygons
