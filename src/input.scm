(declare (unit input)
         (uses primitives
               misc
               window))

(import (prefix sdl2 "sdl-")
        srfi-1
        (chicken bitwise))

(define %down-keys (list))

(define (poll-input-events)
  (let ((event (sdl-poll-event!)))
    (when event
      (let ((type (sdl-event-type event)))
        (cond
         ;; Keyboard events (button mod)
         ((eq? type 'key-down)
          (let ((sym (sdl-keyboard-event-sym event)))
            (send-event 'key-down
                        sym
                        (sdl-keyboard-event-mod event))
            (set! %down-keys (cons sym %down-keys))))
         ((eq? type 'key-up)
          (let ((sym (sdl-keyboard-event-sym event)))
            (send-event key-up
                        sym
                        (sdl-keyboard-event-mod event))
            (set! %down-keys (remove (=? sym) %down-keys))))
         ;; Mouse motion event (vect)
         ((eq? type 'mouse-motion)
          (send-event 'mouse-move (vect:create (sdl-mouse-motion-event-x event)
                                               (sdl-mouse-motion-event-y event))))
         ;; Mouse press event (button vect)
         ((or (eq? type 'mouse-button-down)
              (eq? type 'mouse-button-up))
          (send-event (if (eq? type 'mouse-button-down) 'button-down 'button-up)
                      (vect:create (sdl-mouse-button-event-x event)
                                   (sdl-mouse-button-event-y event))))
         ((eq? type 'quit)
          (set! %window-should-close? #t))))))
  ;; Keyboard pressed event. These events keep firing as long a key is pressed.
  ;; Modifiers are ignored (always zero).
  (for-each (lambda (sym)
              (send-event-not-double 'key-pressed sym 0)) %down-keys))

(define (key-down? key)
  (member key %down-keys))

;; Keys
(define key-unknown 'unknown)
(define key-backspace 'backspace)
(define key-tab 'tab)
(define key-clear 'clear)
(define key-return 'return)
(define key-pause 'pause)
(define key-escape 'escape)
(define key-space 'space)
(define key-exclaim 'exclaim)
(define key-quotedbl 'quotedbl)
(define key-hash 'hash)
(define key-dollar 'dollar)
(define key-ampersand 'ampersand)
(define key-quote 'quote)
(define key-leftparen 'leftparen)
(define key-rightparen 'rightparen)
(define key-asterisk 'asterisk)
(define key-plus 'plus)
(define key-comma 'comma)
(define key-minus 'minus)
(define key-period 'period)
(define key-slash 'slash)
(define key-0 '0)
(define key-1 '1)
(define key-2 '2)
(define key-3 '3)
(define key-4 '4)
(define key-5 '5)
(define key-6 '6)
(define key-7 '7)
(define key-8 '8)
(define key-9 '9)
(define key-colon 'colon)
(define key-semicolon 'semicolon)
(define key-less 'less)
(define key-equals 'equals)
(define key-greater 'greater)
(define key-question 'question)
(define key-at 'at)
(define key-leftbracket 'leftbracket)
(define key-backslash 'backslash)
(define key-rightbracket 'rightbracket)
(define key-caret 'caret)
(define key-underscore 'underscore)
(define key-backquote 'backquote)
(define key-a 'a)
(define key-b 'b)
(define key-c 'c)
(define key-d 'd)
(define key-e 'e)
(define key-f 'f)
(define key-g 'g)
(define key-h 'h)
(define key-i 'i)
(define key-j 'j)
(define key-k 'k)
(define key-l 'l)
(define key-m 'm)
(define key-n 'n)
(define key-o 'o)
(define key-p 'p)
(define key-q 'q)
(define key-r 'r)
(define key-s 's)
(define key-t 't)
(define key-u 'u)
(define key-v 'v)
(define key-w 'w)
(define key-x 'x)
(define key-y 'y)
(define key-z 'z)
(define key-delete 'delete)
(define key-kp0 'kp0)
(define key-kp1 'kp1)
(define key-kp2 'kp2)
(define key-kp3 'kp3)
(define key-kp4 'kp4)
(define key-kp5 'kp5)
(define key-kp6 'kp6)
(define key-kp7 'kp7)
(define key-kp8 'kp8)
(define key-kp9 'kp9)
(define key-kperiod 'kperiod)
(define key-kp 'kdivide)
(define key-kp 'kmultiply)
(define key-kp 'kminus)
(define key-kp 'kplus)
(define key-kp 'kenter)
(define key-kp 'kequals)
(define key-up 'up)
(define key-down 'down)
(define key-right 'right)
(define key-left 'left)
(define key-insert 'insert)
(define key-home 'home)
(define key-end 'end)
(define key-pageup 'pageup)
(define key-pagedown 'pagedown)
(define key-f1 'f1)
(define key-f2 'f2)
(define key-f3 'f3)
(define key-f4 'f4)
(define key-f5 'f5)
(define key-f6 'f6)
(define key-f7 'f7)
(define key-f8 'f8)
(define key-f9 'f9)
(define key-f10 'f10)
(define key-f11 'f11)
(define key-f12 'f12)
(define key-f13 'f13)
(define key-f14 'f14)
(define key-f15 'f15)
(define key-numlock 'numlock)
(define key-capslock 'capslock)
(define key-scrollock 'scrollock)
(define key-rshift 'rshift)
(define key-lshift 'lshift)
(define key-rctrl 'rctrl)
(define key-lctrl 'lctrl)
(define key-ralt 'ralt)
(define key-lalt 'lalt)
(define key-rmeta 'rmeta)
(define key-lmeta 'lmeta)
(define key-lsuper 'lsuper)
(define key-rsuper 'rsuper)
(define key-mode 'mode)
(define key-compose 'compose)
(define key-help 'help)
(define key-print 'print)
(define key-sysreq 'sysreq)
(define key-break 'break)
(define key-menu 'menu)
(define key-power 'power)
(define key-euro 'euro)
(define key-undo 'undo)

;; Modifiers
(define mod-none 'none)
(define mod-lshift 'lshift)
(define mod-rshift 'rshift)
(define mod-lctrl 'lctrl)
(define mod-rctrl 'rctrl)
(define mod-lalt 'lalt)
(define mod-ralt 'ralt)
(define mod-lmeta 'lmeta)
(define mod-rmeta 'rmeta)
(define mod-num 'num)
(define mod-caps 'caps)
(define mod-mode 'mode)
(define mod-reserved 'reserved)
(define mod-ctrl 'ctrl)
(define mod-shift 'shift)
(define mod-alt 'alt)
(define mod-meta 'meta)

;; Mouse buttons
(define button_left 'left)
(define button_middle 'middle)
(define button_right 'right)
(define button_wheel-up 'wheel-up)
(define button_wheel-down 'wheel-down)
